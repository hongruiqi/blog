<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Qi&#39;s Blog</title>
    <link>http://qcoding.net/</link>
    <description>Recent content on Qi&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>2016 Qi.</copyright>
    <lastBuildDate>Tue, 10 May 2016 21:56:45 +0800</lastBuildDate>
    <atom:link href="http://qcoding.net/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>FUNDAMENTAL CONCEPTS</title>
      <link>http://qcoding.net/posts/first/</link>
      <pubDate>Tue, 10 May 2016 21:56:45 +0800</pubDate>
      
      <guid>http://qcoding.net/posts/first/</guid>
      <description>

&lt;h2 id=&#34;内核:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;内核&lt;/h2&gt;

&lt;p&gt;内核的存在本质上是为了方便用户程序的编写。它屏蔽了硬件的底层细节，通过系统调用API向用户程序提供统一的接口。内核抽象出了很多概念，使得用户程序的开发更加简单。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;进程。早期的CPU都是单核的，如果CPU上只运行一个任务，当任务等待外部资源时，CPU只能保持空闲，得不到充分利用。因此，任务在等待时，会将其它任务加载至内存中运行。如果这个步骤由每个任务自己来完成，无疑是十分繁复的。内核抽象出了进程的概念，每个任务都是一个独立的进程，当进程需要等待时，将控制权交给内核，由内核选择其它可运行的任务继续在CPU上运行。这样，每个任务可以只关心自身的执行流程，任务之间的切换对于每个任务来说都是透明（不可感知）的。进程之间相互隔离，进程所使用的资源也完全由内核管理，这使得一个进程的奔溃不会对系统整体的稳定性造成影响。内核控制进程的切换有两种方式：一是协作式的，只有进程主动将控制权交给内核时才会发生进程切换；另一种是抢占式的，进程在执行过程中，内核可以随时暂停其执行，切换至其它进程。&lt;/li&gt;
&lt;li&gt;内存管理。物理内存是有限的，如果由每个进程直接控制物理内存的使用，既不可靠也不安全。Linux内核使用虚拟内存的机制，它有两个优点：

&lt;ul&gt;
&lt;li&gt;进程之间是相互隔离的，进程无法直接修改其它进程或内核使用的内存。一个进程的错误不会影响其它进程的运行。&lt;/li&gt;
&lt;li&gt;对于每个进程，不需要把全部内存都保留在物理内存中，物理内存可以支撑更多的进程。&lt;/li&gt;
&lt;li&gt;虚拟内存上连续的地址段在物理内存上可以是不连续的，物理内存可以更加灵活的分配和使用，程序可以在更大的空间上连续寻址。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;文件系统。文件系统抽象了不同类型的存储介质，使得程序可以以相同的方式访问存储在光盘、磁盘甚至远程系统上的文件。&lt;/li&gt;
&lt;li&gt;文件。Linux上，文件不仅仅是数据的载体，还是操作硬件设备的接口。内核将外部设备抽象成文件系统上的特殊文件，进程可以通过文件的读（&lt;code&gt;read&lt;/code&gt;)、写（&lt;code&gt;write&lt;/code&gt;）和控制(&lt;code&gt;ioctl&lt;/code&gt;)操作，控制外部设备。内核将用户进程的读写请求传递给内核驱动，由内核驱动完成底层的硬件操作。内核还需要协调用户进程对硬件的控制请求，避免发生冲突。&lt;/li&gt;
&lt;li&gt;网络。内核中还内置了网络协议的支持。用户程序在访问网络时，可以使用&lt;code&gt;socket&lt;/code&gt;API，仅需填写必要的信息就可以&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;现代处理器允许CPU运行在至少两种不同的模式：用户态和内核态，并提供硬件指令在两种模式间切换。虚拟内存也被相应的标记为用户空间和内核空间。当运行在用户态时，CPU仅可以访问被标记为用户空间的内存；当运行在内核态时，CPU可以访问用户空间和内核空间的内存。&lt;/p&gt;

&lt;p&gt;某些操作仅允许在内核态执行，如停机指令、访问内存管理硬件、初始化设备IO操作等。通过硬件提供的机制，操作系统可以保证用户进程无法访问内核的指令和数据结构，或者执行对系统运行有负面影响的操作。&lt;/p&gt;

&lt;h2 id=&#34;shell:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;Shell&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;shell&lt;/code&gt;被设计为读取用户输入的命令，并执行合适的程序响应这些命令，故也被称为命令解释器。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;login shell&lt;/code&gt;表示用户登录时被创建来运行shell的进程。&lt;/p&gt;

&lt;p&gt;在某些操作系统中，命令解释器是内核的一部分，但在UNIX系统中，shell是一个用户进程。shell有多种，同一计算机上的不同用户可以同时使用不同的shell。常见的shell有&lt;code&gt;Bourne shell(sh)&lt;/code&gt;，&lt;code&gt;C shell(csh)&lt;/code&gt;，&lt;code&gt;Korn shell(ksh)&lt;/code&gt;，&lt;code&gt;Bourne again shell(bash)&lt;/code&gt;。这些shell不仅仅供交互使用，还可以解析&lt;code&gt;shell脚本&lt;/code&gt;，脚本是包含shell命令的文本文件。以此为目的，shell中包含了编程语言中的设施，如变量、循环、条件语句、IO命令和函数。每种shell都可完成相似的功能，但语法上有变化。&lt;/p&gt;

&lt;h2 id=&#34;用户和组:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;用户和组&lt;/h2&gt;

&lt;p&gt;系统中的每个用户都被唯一标识，用户属于组。&lt;/p&gt;

&lt;h3 id=&#34;用户:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;用户&lt;/h3&gt;

&lt;p&gt;系统中的每个用户都有唯一的的登录名（用户名）和对应的数字ID（&lt;code&gt;uid&lt;/code&gt;）。每个用户都在系统中的密码文件中定义（&lt;code&gt;/etc/passwd&lt;/code&gt;），一行一个，包含以下附加信息：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;组ID：用户所属的第一个组的数字ID&lt;/li&gt;
&lt;li&gt;Home目录：用户登录后被放置的初始目录&lt;/li&gt;
&lt;li&gt;Login shell：登录时执行的shell程序名称&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;密码记录还可包含加密形式的用户密码，但为了安全，密码通常被存放在独立的&lt;code&gt;shadow&lt;/code&gt;文件中，只有特权用户才可读取。&lt;/p&gt;

&lt;h3 id=&#34;组:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;组&lt;/h3&gt;

&lt;p&gt;为了控制和管理对文件和其它系统资源的访问，用户通常被组织成组。每个组都被&lt;code&gt;group&lt;/code&gt;文件（&lt;code&gt;/etc/group&lt;/code&gt;）中的一行定义，包含以下信息：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;组名：组的唯一名称&lt;/li&gt;
&lt;li&gt;组ID：组的数字ID&lt;/li&gt;
&lt;li&gt;用户列表：组成员的登录名，以逗号分隔。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;超级用户:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;超级用户&lt;/h3&gt;

&lt;p&gt;超级用户对系统有特权。超级用户的用户ID为0，通常登录名为root。在一般的UNIX系统中，超级用户跳过了所有的系统权限检查。因此，超级用户可以无视文件权限设置，访问系统上的任意文件；发送信号给系统中的任意用户进程。系统管理员使用超级用户执行系统的管理任务。&lt;/p&gt;

&lt;h2 id=&#34;单一目录层次-目录-链接和文件:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;单一目录层次、目录、链接和文件&lt;/h2&gt;

&lt;p&gt;内核维护了单一的目录层次结构来管理系统上的所有文件（与之相反，Windows的每个磁盘设备都有自己的目录层次）。在层次结构的顶端是根目录，命名为&lt;code&gt;/&lt;/code&gt;。所有的文件和目录都是根目录的孩子或后代。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;2-1.png?raw=1&#34; alt=&#34;2-1&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;文件类型:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;文件类型&lt;/h3&gt;

&lt;p&gt;在文件系统中，每个文件都有类型。&lt;code&gt;regular&lt;/code&gt;或&lt;code&gt;plain&lt;/code&gt;文件表示普通的数据文件，其它的文件类型包括：设备、管道、socket、目录和符号链接。&lt;/p&gt;

&lt;h3 id=&#34;目录和链接:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;目录和链接&lt;/h3&gt;

&lt;p&gt;目录是一个特殊的文件，其内容类似一张文件名和文件引用的映射表，这种引用称为链接。文件可以有多个链接，因此可以有多个名字，分别存放在相同或不同的目录中。&lt;/p&gt;

&lt;p&gt;目录中包含的链接可以指向文件或其它目录。目录间的链接建立了目录的层次。&lt;/p&gt;

&lt;p&gt;每个目录都包含至少两个条目，&lt;code&gt;.(dot)&lt;/code&gt;链接到其自身和&lt;code&gt;..(dot-dot)&lt;/code&gt;链接到其父目录。每个目录，除了根目录，都有父目录。对于根目录，&lt;code&gt;..&lt;/code&gt;条目链接到了它自身（因此&lt;code&gt;/..&lt;/code&gt;和&lt;code&gt;/&lt;/code&gt;是等价的）。&lt;/p&gt;

&lt;h3 id=&#34;符号链接:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;符号链接&lt;/h3&gt;

&lt;p&gt;符号链接（&lt;code&gt;Symbolic link&lt;/code&gt;）与链接类似，提供了文件的别名。但普通的链接是目录中一个文件名到文件的指针，而符号链接是包含其它文件文件名的特殊类型文件。换言之，符号链接是目录中一个文件名到文件的指针，指针指向的文件中包含了其它文件的文件名。后者通常称为符号链接的目标。当在系统调用中指定路径时，在大多数情况下，内核会自动&lt;code&gt;解引用&lt;/code&gt;（&lt;code&gt;跟随&lt;/code&gt;）路径中的每个符号链接，将它替换为它指向的文件名。当符号链接的目标是另一符号链接时，这个过程会递归进行。内核对递归的层次做了限制，以避免符号链接的循环）。如果符号链接引用了一个不存在的文件，则称之为悬挂链接（&lt;code&gt;dangling link&lt;/code&gt;）。通常普通链接被称为硬链接（&lt;code&gt;hard link&lt;/code&gt;），符号链接被称为软链接（&lt;code&gt;sort link&lt;/code&gt;）。&lt;/p&gt;

&lt;h3 id=&#34;文件名:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;文件名&lt;/h3&gt;

&lt;p&gt;在大多数Linux文件系统中，文件名最长为255个字符，可以包含除了&lt;code&gt;/&lt;/code&gt;和&lt;code&gt;\0&lt;/code&gt;之外的任意字符。但应该尽量使用&lt;code&gt;[-._a-zA-Z0-9]&lt;/code&gt;中的字符组成文件名，以保证跨平台的兼容性。文件名中应避免使用在shell和正则表达式中有特殊含义的字符；也应避免以&lt;code&gt;-&lt;/code&gt;开头，防止与shell命令的参数混淆。&lt;/p&gt;

&lt;h3 id=&#34;路径名:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;路径名&lt;/h3&gt;

&lt;p&gt;路径名是以可选的&lt;code&gt;/&lt;/code&gt;开头，并跟随若干以&lt;code&gt;/&lt;/code&gt;分隔的文件名组成的。路径可以是绝对的或相对的：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;绝对路径以&lt;code&gt;/&lt;/code&gt;开始，指定文件相对于根目录的位置。&lt;/li&gt;
&lt;li&gt;相对路径相对进程当前工作目录指定文件位置。相对路径没有开头的&lt;code&gt;/&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;当前工作目录:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;当前工作目录&lt;/h3&gt;

&lt;p&gt;每个进程有&lt;code&gt;当前工作目录&lt;/code&gt;，相对路径从这个目录开始解析。进程从父进程继承当前工作目录。login shell使用用户在password文件中的home目录字段初始化当前工作目录。shell的当前工作目录可以使用&lt;code&gt;cd&lt;/code&gt;命令改变。&lt;/p&gt;

&lt;h3 id=&#34;文件的所有权和权限:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;文件的所有权和权限&lt;/h3&gt;

&lt;p&gt;每个文件都有一个关联的用户ID和组ID，它们定义了文件的所有者和属于的组。文件的所有权用于确定文件对于用户的访问权限。&lt;/p&gt;

&lt;p&gt;对于文件访问，系统将用户分为三类：文件的所有者、文件所属组中的用户和其他用户。每个分类可以设置三个权限位：&lt;code&gt;read&lt;/code&gt;权限允许读取文件内容；&lt;code&gt;write&lt;/code&gt;权限允许修改文件内容；&lt;code&gt;execute&lt;/code&gt;权限允许文件被执行，文件可以是程序或被解释器处理的脚本。&lt;/p&gt;

&lt;p&gt;这些权限也可以设置在目录上，但它们的含义有所不同：&lt;code&gt;read&lt;/code&gt;权限允许目录的内容（如文件名）被列举；&lt;code&gt;write&lt;/code&gt;权限允许目录的内容被修改（文件名被添加、删除或修改）；&lt;code&gt;execute&lt;/code&gt;（&lt;code&gt;search&lt;/code&gt;）权限允许访问目录内的文件。&lt;/p&gt;

&lt;h2 id=&#34;文件io模型:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;文件IO模型&lt;/h2&gt;

&lt;p&gt;UNIX系统的一个特点是IO的普遍性。相同的系统调用（&lt;code&gt;open&lt;/code&gt;，&lt;code&gt;read&lt;/code&gt;，&lt;code&gt;write&lt;/code&gt;，&lt;code&gt;close&lt;/code&gt;等）可以用于在所有类型的文件上执行IO操作，包括设备。内核将应用的IO请求转换成文件系统或设备驱动的操作，最终将IO应用到目标文件或设备上。因此，使用这些系统调用的程序可以在任意类型的文件上工作。&lt;/p&gt;

&lt;p&gt;内核着重提供了一种文件类型：序列字节流，如磁盘文件，磁盘，磁带文件等。他们可以使用lseek系统调用随机访问。&lt;/p&gt;

&lt;p&gt;大部分应用和库将&lt;code&gt;newline(ASCII 10)&lt;/code&gt;解析为文本中一行的结束并开启新的一行。UNIX系统没有文件结束字符；通过不返回数据的read调用即可获知文件结束。&lt;/p&gt;

&lt;h3 id=&#34;文件描述符:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;文件描述符&lt;/h3&gt;

&lt;p&gt;IO系统调用通过文件描述符引用文件，它通常是一个小的非负整数。文件描述符通常使用&lt;code&gt;open&lt;/code&gt;调用获得，它接受一个路径作为参数，指定要执行IO操作的文件。&lt;/p&gt;

&lt;p&gt;通常，进程在被shell打开时，继承了三个打开的文件描述符：描述符0是标准输入，进程从这个文件中获取输入；描述符1是标准输出，进程的输出写入这个文件；描述符2是标准错误，进程的错误信息或异常提醒或异常状况写入这个文件。在交互式shell或程序中，这三个描述符通常链接到终端中。在&lt;code&gt;stdio&lt;/code&gt;库中，这三个文件描述符对应文件流stdin，stdout和stderr。&lt;/p&gt;

&lt;h3 id=&#34;stdio库:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;stdio库&lt;/h3&gt;

&lt;p&gt;C语言通常使用标准C库中的IO函数执行IO操作。这些&lt;code&gt;stdio&lt;/code&gt;库中的函数包括&lt;code&gt;fopen&lt;/code&gt;，&lt;code&gt;fclose&lt;/code&gt;，&lt;code&gt;scanf&lt;/code&gt;，&lt;code&gt;printf&lt;/code&gt;，&lt;code&gt;fgets&lt;/code&gt;，&lt;code&gt;fputs&lt;/code&gt;等。&lt;/p&gt;

&lt;h2 id=&#34;程序:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;程序&lt;/h2&gt;

&lt;p&gt;程序通常以两种形式存在。一种是源代码，它们是有一系列编程语言中的语句构成的人类可读的文本。它们在执行前，需要被转换成第二种形式：二进制机器语言指令。它可以被机器理解。（脚本是一种例外，它是包含命令的文本文件，这些命令可直接被shell或其它解释器处理）。编译和链接可以将源代码转换成等价的二进制机器码。&lt;/p&gt;

&lt;h3 id=&#34;过滤器:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;过滤器&lt;/h3&gt;

&lt;p&gt;过滤器通常指从标准输入读取输入数据，对输入执行一些转换操作，并将结果写入标准输出的程序。例如&lt;code&gt;cat&lt;/code&gt;，&lt;code&gt;grep&lt;/code&gt;，&lt;code&gt;tr&lt;/code&gt;，&lt;code&gt;sort&lt;/code&gt;，&lt;code&gt;wc&lt;/code&gt;，&lt;code&gt;sed&lt;/code&gt;，&lt;code&gt;awk&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;命令行参数:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;命令行参数&lt;/h3&gt;

&lt;p&gt;在C语言中，进程可以访问&lt;code&gt;命令行参数&lt;/code&gt;。命令行参数是程序运行时提供在命令行的词。为了访问命令行参数，&lt;code&gt;main&lt;/code&gt;函数使用如下形式声明：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;int main(int argc, char* argv[])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;argc&lt;/code&gt;参数表示命令行参数的数量，每个独立的参数可通过指向每个成员的&lt;code&gt;argv&lt;/code&gt;字符串数组访问。第一个字符串，&lt;code&gt;argv[0]&lt;/code&gt;，表示了程序自身的名称。&lt;/p&gt;

&lt;h2 id=&#34;进程:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;进程&lt;/h2&gt;

&lt;p&gt;进程是程序的执行实例。当程序执行时，内核将程序的代码加载到虚拟内存中，为程序变量分配空间，建立数据结构记录进程的相关信息。&lt;/p&gt;

&lt;p&gt;在内核看来，进程是分享计算机资源的实体。对于有限的资源，内核初始分配少量的资源给进程，并在进程的生命周期中，根据进程的需求和系统整体对资源的需求，调整资源的分配。当进程退出时，所有的资源都被释放以被其它进程重用。其它如CPU和网络带宽等可再生资源，必须在所有进程间公平共享。&lt;/p&gt;

&lt;h3 id=&#34;进程的内存布局:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;进程的内存布局&lt;/h3&gt;

&lt;p&gt;进程可以逻辑上分为以下部分，称为段：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Text：程序的指令&lt;/li&gt;
&lt;li&gt;Data：程序使用的静态变量&lt;/li&gt;
&lt;li&gt;Heap：程序动态分配额外内存的区域&lt;/li&gt;
&lt;li&gt;Stack：随着函数的调用和返回，动态伸展和收缩的内存片，用于分配局部变量和函数调用的相关信息。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;进程的创建和执行:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;进程的创建和执行&lt;/h3&gt;

&lt;p&gt;进程通过&lt;code&gt;fork&lt;/code&gt;系统调用创建新进程。调用&lt;code&gt;fork&lt;/code&gt;的进程称为父进程，新的进程称为子进程。内核通过复制父进程创建子进程。子进程继承了父进程数据段、栈和堆的拷贝，可以独立于父进程修改。只读的代码段在两个进程间共享。&lt;/p&gt;

&lt;p&gt;子进程或者执行与父进程共享的代码段中的不同函数，或者执行&lt;code&gt;execve&lt;/code&gt;系统调用，加载并执行全新的程序。&lt;code&gt;execve&lt;/code&gt;调用摧毁了已有的代码、数据段、栈和堆，并基于新程序的代码将他们替换成新的段。&lt;/p&gt;

&lt;p&gt;在&lt;code&gt;execve&lt;/code&gt;之上有若干相关的C库函数，每个都为相同的功能提供了不同的接口。所有的函数都以&lt;code&gt;exec&lt;/code&gt;开头，我们将以&lt;code&gt;exec&lt;/code&gt;指代这些函数。但实际上&lt;code&gt;exec&lt;/code&gt;命名的函数是不存在的。&lt;/p&gt;

&lt;h3 id=&#34;进程id和父进程id:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;进程ID和父进程ID&lt;/h3&gt;

&lt;p&gt;每个进程都有独立的整型进程标识（PID）。每个进程还有父进程ID（PPID），它标识了请求内核创建此进程的进程。&lt;/p&gt;

&lt;h3 id=&#34;进程终止和终止状态:e8fb9c67eba912c72729806db31eaa1b&#34;&gt;进程终止和终止状态&lt;/h3&gt;

&lt;p&gt;进程可以通过两种方式终止：通过&lt;code&gt;_exit()&lt;/code&gt;系统调用（或与之相关的&lt;code&gt;exit()&lt;/code&gt;库调用），或者被递送的信号杀死。进程终止时会产生一个结束状态，一个小的非负整数。它可以被父进程通过&lt;code&gt;wait()&lt;/code&gt;系统调用获取。在调用&lt;code&gt;_exit()&lt;/code&gt;的情况下，进程明确的指定了终止状态。如果进程是被信号杀死，终止状态根据造成进程死亡的信号类型设置。&lt;/p&gt;

&lt;p&gt;通常情况下，终止状态为0表示进程顺利执行，非0值表示错误发生。大部分的shell可通过shell变量&lt;code&gt;$?&lt;/code&gt;获取最后执行程序的终止状态。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>